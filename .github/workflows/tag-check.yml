name: Tag Check

on:
  push:
    tags:
      - '*'

jobs:
  verify-tag:
    runs-on: ubuntu-latest
    steps:
      - name: Hämta Git-användarens namn och e-post
        run: |
          echo "GIT_COMMITTER_NAME=$(git log -1 --pretty=format:'%an')" >> $GITHUB_ENV
          echo "GIT_COMMITTER_EMAIL=$(git log -1 --pretty=format:'%ae')" >> $GITHUB_ENV

      - name: Kontrollera taggens ursprung
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const tagRef = context.ref; // refs/tags/v1.0.0
            const tagName = tagRef.replace('refs/tags/', '');
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            // Hämta taggens information
            const { data: tagData } = await github.rest.git.getTag({
              owner,
              repo,
              tag_sha: context.sha,
            });

            // Hämta commitens information
            const { data: commitData } = await github.rest.git.getCommit({
              owner,
              repo,
              commit_sha: tagData.object.sha,
            });

            // Hämta brancher som innehåller denna commit
            const { data: branches } = await github.rest.repos.listBranchesForHeadCommit({
              owner,
              repo,
              commit_sha: commitData.sha,
            });

            // Kontrollera om någon av brancherna är en release-branch
            const releaseBranchPattern = /^release\/.+$/;
            const isFromReleaseBranch = branches.some(branch => releaseBranchPattern.test(branch.name));

            if (!isFromReleaseBranch) {
              core.setFailed(`Taggen '${tagName}' är inte skapad från en release-branch.`);
              return;
            }

            // Hämta användaren som pushade taggen
            const pusher = context.actor;

            // Läs in CODEOWNERS-filen
            const { data: codeownersContent } = await github.rest.repos.getContent({
              owner,
              repo,
              path: '.github/CODEOWNERS',
              ref: 'main', // Anta att CODEOWNERS finns på main
            });

            const decodedContent = Buffer.from(codeownersContent.content, 'base64').toString('utf8');

            // Hämta godkänd användare för taggar (ditt användarnamn)
            const lines = decodedContent.split('\n').filter(line => line.trim() !== '');
            let allowedUsers = null;

            for (const line of lines) {
              if (line.startsWith('#')) {
                continue;
              } 

              const [pattern, ...owners] = line.trim().split(/\s+/);
              if (pattern !== 'tags') {
                    continue;
                }

                allowedUsers = owners.map(user => user.replace('@', ''));
                break;
            }

            if (!allowedUser) {
              core.setFailed('Inga godkända användare för taggar definierad i CODEOWNERS.');
              return;
            }
            
            if (!allowedUsers.includes(pusher)) {
              core.setFailed(`Endast ${allowedUsers.join(', ')} kan pusha taggar. Användare '${pusher}' är inte behörig.`);
              return;
            }

            core.notice(`Taggen '${tagName}' är korrekt skapad från en release-branch av behörig användare.`);
