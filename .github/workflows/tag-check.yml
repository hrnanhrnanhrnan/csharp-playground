name: tag-check

on:
  push:
    tags:
      - '*'

permissions:
  contents: write

jobs:
  verify-tag:
    runs-on: ubuntu-latest
    steps:
      - name: Get Git users name and e-mail
        run: |
          echo "GIT_COMMITTER_NAME=$(git log -1 --pretty=format:'%an')" >> $GITHUB_ENV
          echo "GIT_COMMITTER_EMAIL=$(git log -1 --pretty=format:'%ae')" >> $GITHUB_ENV

      - name: Check origin of tag
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const tagRef = context.ref; // refs/tags/v1.0.0
            const tagName = tagRef.replace('refs/tags/', '');
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            // Get ref for the tag
            const { data: tagRefData } = await github.rest.git.getRef({
              owner,
              repo,
              ref: `tags/${tagName}`,
            });

            // Get the commits SHA from the tag
            const tagObjectSha = tagRefData.object.sha;

            // Get commmit information
            const { data: commitData } = await github.rest.git.getCommit({
              owner,
              repo,
              commit_sha: tagObjectSha,
            });

            // Get branches containing this commit
            const { data: branches } = await github.rest.repos.listBranchesForHeadCommit({
              owner,
              repo,
              commit_sha: commitData.sha,
            });

            // Check if the commit is on a release branch
            const releaseBranchPattern = /^release\/.+$/;
            const isFromReleaseBranch = branches.some(branch => releaseBranchPattern.test(branch.name));

            if (!isFromReleaseBranch) {
              core.error(`The tag '${tagName}' is not created on a release branch.`);

              // Remove the tag
              await github.rest.git.deleteRef({
                owner,
                repo,
                ref: `tags/${tagName}`,
              });

              core.setFailed(`The tag '${tagName}' has been removed since it does not meet the requirements.`);
              return;
            }

            // Get the user who pushed the tag
            const pusher = context.actor;

            const { data: codeownersContent } = await github.rest.repos.getContent({
              owner,
              repo,
              path: '.github/CODEOWNERS',
              ref: 'main', // Anta att CODEOWNERS finns pÃ¥ main
            });

            const decodedContent = Buffer.from(codeownersContent.content, 'base64').toString('utf8');

            // Get the required approvers for tags
            const lines = decodedContent.split('\n').filter(line => line.trim() !== '');
            let allowedUsers = null;

            for (const line of lines) {
              if (line.startsWith('#')) {
                continue;
              } 

              const [pattern, ...owners] = line.trim().split(/\s+/);
              if (pattern !== 'tags') {
                    continue;
                }

                allowedUsers = owners.map(user => user.replace('@', ''));
                break;
            }

            if (!allowedUsers || !allowedUsers.includes(pusher)) {
              // Remove the tag
              await github.rest.git.deleteRef({
                owner,
                repo,
                ref: `tags/${tagName}`,
              });

              core.setFailed('Coud ot verify that the tag has been pushed by authorized user. Removes the tag');
              return;
            }
            
            core.notice(`The tag '${tagName}' has been verified and created successfully from a release branch by a authorized user.`);
